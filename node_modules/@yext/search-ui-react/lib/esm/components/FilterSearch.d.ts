/// <reference types="react" />
import { SearchParameterField } from '@yext/search-headless-react';
import { AutocompleteResultCssClasses } from './utils/renderAutocompleteResult';
/**
 * The CSS class interface for {@link FilterSearch}.
 *
 * @public
 */
export interface FilterSearchCssClasses extends AutocompleteResultCssClasses {
    filterSearchContainer?: string;
    label?: string;
    inputElement?: string;
    sectionLabel?: string;
    focusedOption?: string;
    optionsContainer?: string;
}
/**
 * The props for the {@link FilterSearch} component.
 *
 * @public
 */
export interface FilterSearchProps {
    /** An array of fieldApiName and entityType which indicates what to perform the filter search against. */
    searchFields: Omit<SearchParameterField, 'fetchEntities'>[];
    /** The display label for the component. */
    label?: string;
    /**
     * The search input's placeholder text when no text has been entered by the user.
     * Defaults to "Search here...".
     */
    placeholder?: string;
    /** Whether to trigger a search when an option is selected. Defaults to false. */
    searchOnSelect?: boolean;
    /** Determines whether or not the results of the filter search are separated by field. Defaults to false. */
    sectioned?: boolean;
    /** CSS classes for customizing the component styling. */
    customCssClasses?: FilterSearchCssClasses;
}
/**
 * A component which allows a user to search for filters associated with specific entities and fields.
 *
 * @public
 *
 * @param props - {@link FilterSearchProps}
 * @returns A react component for Filter Search
 */
export declare function FilterSearch({ searchFields, label, placeholder, searchOnSelect, sectioned, customCssClasses }: FilterSearchProps): JSX.Element;
//# sourceMappingURL=FilterSearch.d.ts.map