import React, { useState } from "react";
import s from "./UsagePanel.module.css";
import c from "classnames";
const UsagePanel = (props) => {
  const { fields } = props;
  const [isVisible, setVisible] = useState(false);
  const [sortedColIdx, setSortedColIdx] = useState(1);
  const [sortDirection, setSortDirection] = useState("Ascending");
  const toggleSortState = (colIdx) => {
    if (colIdx === sortedColIdx) {
      setSortDirection(
        sortDirection === "Ascending" ? "Descending" : "Ascending"
      );
    } else {
      setSortDirection("Ascending");
      setSortedColIdx(colIdx);
    }
  };
  const getFieldProps = (field) => {
    const [fieldKey, fieldVal] = field;
    let shortKey = fieldKey;
    const prefix = "document.";
    if (shortKey.startsWith(prefix)) {
      shortKey = shortKey.slice(prefix.length);
    }
    let shortVal = fieldVal;
    const maxStrLen = 40;
    if (typeof shortVal === "string" && shortVal.length > maxStrLen) {
      shortVal = `${shortVal.slice(0, maxStrLen)}...`;
    }
    const fieldIsUsed = !!(props.usageMap[fieldKey] || props.proxyUsageList[fieldKey]);
    let fieldStatus = "NotUsed";
    if (props.usageMap[fieldKey]) {
      fieldStatus = "Used";
    } else if (props.proxyUsageList[fieldKey]) {
      fieldStatus = "Internal";
    }
    const usageEls = props.usageMap[fieldKey];
    return {
      fieldKey: shortKey,
      fieldVal: shortVal.toString(),
      fieldIsUsed,
      fieldStatus,
      usedEls: usageEls
    };
  };
  const getSortFnFromState = () => {
    const colIdxToPropKey = {
      0: "fieldStatus",
      1: "fieldKey"
    };
    const fieldStatusSortIndices = {
      Used: "0",
      Internal: "1",
      NotUsed: "2"
    };
    return (a, b) => {
      let a_value = a[colIdxToPropKey[sortedColIdx]];
      let b_value = b[colIdxToPropKey[sortedColIdx]];
      if (!(a_value && b_value)) {
        return 0;
      }
      if (colIdxToPropKey[sortedColIdx] === "fieldStatus") {
        a_value = fieldStatusSortIndices[a_value];
        b_value = fieldStatusSortIndices[b_value];
      }
      if (sortDirection === "Ascending") {
        return a_value > b_value ? 1 : -1;
      } else {
        return a_value < b_value ? 1 : -1;
      }
    };
  };
  return /* @__PURE__ */ React.createElement("div", {
    className: c(s.panel, { [s.isVisible]: isVisible })
  }, /* @__PURE__ */ React.createElement("div", {
    className: s.headingRow
  }, /* @__PURE__ */ React.createElement("div", {
    className: s.heading
  }, "Status", /* @__PURE__ */ React.createElement("button", {
    className: s.sortButton,
    onClick: () => toggleSortState(0)
  }, /* @__PURE__ */ React.createElement("span", {
    className: c(s.sortIcon, s[`is${sortDirection}`], {
      [s.isSorted]: sortedColIdx === 0
    })
  }))), /* @__PURE__ */ React.createElement("div", {
    className: s.heading
  }, "Field Data", /* @__PURE__ */ React.createElement("button", {
    className: s.sortButton,
    onClick: () => toggleSortState(1)
  }, /* @__PURE__ */ React.createElement("span", {
    className: c(s.sortIcon, s[`is${sortDirection}`], {
      [s.isSorted]: sortedColIdx === 1
    })
  })))), /* @__PURE__ */ React.createElement("div", {
    className: s.scrollable
  }, Object.entries(fields).map((field) => getFieldProps(field)).sort(getSortFnFromState()).map((fieldProps, idx) => /* @__PURE__ */ React.createElement(UsagePanelField, {
    key: idx,
    ...fieldProps
  }))), /* @__PURE__ */ React.createElement("button", {
    className: s.toggleBtn,
    onClick: () => setVisible(!isVisible)
  }));
};
const UsagePanelField = (props) => {
  const { fieldKey, fieldVal, fieldIsUsed, fieldStatus, usedEls } = props;
  const statusToDisplayedStatus = {
    NotUsed: "Not Used",
    Used: "On Page",
    Internal: "Internal Logic"
  };
  const showUsageLocation = () => {
    if (usedEls && usedEls.length > 0) {
      const el = usedEls[0];
      document.querySelectorAll(`.${s.highlightedUsage}`).forEach((el2) => el2.classList.remove(s.highlightedUsage));
      el.classList.add(s.highlightedUsage);
      window.scrollTo({
        top: el.getBoundingClientRect().top,
        behavior: "smooth"
      });
    }
  };
  c(s.fieldStatusIndicator, `is${fieldStatus}`);
  return /* @__PURE__ */ React.createElement("div", {
    className: c(
      s.field,
      { [s.isUsed]: fieldIsUsed },
      { [s.isNotUsed]: !fieldIsUsed }
    ),
    onClick: () => showUsageLocation()
  }, /* @__PURE__ */ React.createElement("span", {
    className: c(s.fieldStatusIndicator, s[`is${fieldStatus}`])
  }), /* @__PURE__ */ React.createElement("span", {
    className: s.fieldStatus
  }, statusToDisplayedStatus[fieldStatus]), /* @__PURE__ */ React.createElement("span", {
    className: s.fieldSummary
  }, /* @__PURE__ */ React.createElement("span", {
    className: s.fieldKey
  }, fieldKey), /* @__PURE__ */ React.createElement("span", {
    className: s.fieldVal
  }, fieldVal)));
};
var UsagePanel_default = UsagePanel;
export {
  UsagePanel_default as default
};
