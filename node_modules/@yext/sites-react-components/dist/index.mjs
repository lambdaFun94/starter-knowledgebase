import React, { createContext, useContext, useState, useRef, useEffect, useMemo } from 'react';
import c from 'classnames';
import PhoneNumber from 'awesome-phonenumber';
import { MapOptions, MapPinOptions, PinProperties } from '@yext/components-tsx-maps';
import { Coordinate } from '@yext/components-tsx-geo';
import { createPortal } from 'react-dom';

const sumNum = (a = 0, b = 0) => {
  return a + b;
};

const Button = ({
  children,
  onClick,
  a,
  b
}) => {
  const sum = sumNum(a, b);
  return /* @__PURE__ */ React.createElement("button", {
    onClick
  }, children, " (", sum, ")");
};

const getHref = (cta2) => {
  if (cta2.linkType === "Email" || isEmail(cta2.link)) {
    return `mailto:${cta2.link}`;
  }
  if (cta2.linkType === "Phone" || isPhone(cta2.link)) {
    return `tel:${cta2.link}`;
  }
  return cta2.link;
};
function cta(link, linkType = "URL" /* URL */, label) {
  return {
    link,
    linkType: parseLinkType(linkType),
    label: typeof label === "string" ? label : ""
  };
}
function parseLinkType(type) {
  if (typeof type !== "string")
    return type;
  switch (type) {
    case "Email":
      return "Email" /* Email */;
    case "Phone":
      return "Phone" /* Phone */;
    default:
      return "URL" /* URL */;
  }
}
function isHREFProps(props) {
  return "href" in props;
}
const isEmail = (string) => {
  const re = /^[a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;
  return re.test(string);
};
const isPhone = (string) => {
  const phoneNumber = new PhoneNumber(string);
  return phoneNumber.isValid();
};
const reverse = (string) => {
  for (var i = string.length - 1, o = ""; i >= 0; o += string[i--]) {
  }
  return o;
};

const ConfigurationProviderContext = createContext({
  components: {}
});
function useGlobal() {
  return useContext(ConfigurationProviderContext);
}
ConfigurationProviderContext.displayName = "@yext/sites-react-components/utils/ConfigurationProvider";
const ConfigurationProvider = ConfigurationProviderContext.Provider;

var __defProp$9 = Object.defineProperty;
var __defProps$1 = Object.defineProperties;
var __getOwnPropDescs$1 = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols$9 = Object.getOwnPropertySymbols;
var __hasOwnProp$9 = Object.prototype.hasOwnProperty;
var __propIsEnum$9 = Object.prototype.propertyIsEnumerable;
var __defNormalProp$9 = (obj, key, value) => key in obj ? __defProp$9(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues$9 = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp$9.call(b, prop))
      __defNormalProp$9(a, prop, b[prop]);
  if (__getOwnPropSymbols$9)
    for (var prop of __getOwnPropSymbols$9(b)) {
      if (__propIsEnum$9.call(b, prop))
        __defNormalProp$9(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps$1 = (a, b) => __defProps$1(a, __getOwnPropDescs$1(b));
var __objRest$2 = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp$9.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols$9)
    for (var prop of __getOwnPropSymbols$9(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum$9.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
let Link;
Link = React.forwardRef((props, ref) => {
  Link.defaultProps = useGlobal().components.Link;
  Link.displayName = "Link";
  const _a = props, { children, onClick, yaTrack, className, cta: cta$1, href } = _a, rest = __objRest$2(_a, ["children", "onClick", "yaTrack", "className", "cta", "href"]);
  const link = isHREFProps(props) ? cta(href, props.linkType) : cta$1;
  const obfuscate = props.obfuscate || props.obfuscate !== false && isEmail(link.link);
  const [humanInteraction, setHumanInteraction] = useState(false);
  const handleClick = (e) => {
    setHumanInteraction(true);
    if (onClick)
      onClick(e);
  };
  const useLinkAsLabel = !children && !link.label;
  const isObfuscate = !humanInteraction && obfuscate !== false;
  const obfuscatedStyle = __spreadProps$1(__spreadValues$9({}, props.style), {
    unicodeBidi: "bidi-override",
    direction: useLinkAsLabel && isObfuscate ? "rtl" : "ltr"
  });
  const renderedLink = isObfuscate ? reverse(link.link) : link.link;
  return /* @__PURE__ */ React.createElement("a", __spreadValues$9({
    className: c("Link", className),
    "data-ya-track": yaTrack,
    href: humanInteraction || !obfuscate ? getHref(link) : "obfuscate",
    onClick: (e) => handleClick(e),
    rel: props.target && !props.rel ? "noopener" : void 0,
    ref,
    style: obfuscatedStyle
  }, rest), children || link.label || renderedLink);
});
var Link$1 = Link;

const defaultBreakpoints = ["768px", "992px", "1200px"];
const getSrcSetFromSizes = (src, sizes) => {
  const urlComponents = src.split("/");
  urlComponents.pop();
  const urlNoDimensions = urlComponents.join("/");
  return sizes.map(([bp, sizes2]) => {
    const [width, _] = sizes2.split("x");
    if (!Number(width)) {
      throw new Error(`couldn't parse width as a number`);
    }
    return `${urlNoDimensions}/${width}x0.webp ${width}w`;
  }).join(", ");
};
function transformBpSizes(bpSizes) {
  return defaultBreakpoints.map((bp, idx) => [bp, bpSizes[idx]]);
}
function addWidthToCustomSizes(imageField, customSizes) {
  return customSizes.map(([bp, size]) => {
    const [requestedWidth, requestedHeight] = size.split("x");
    const widthIsValid = requestedWidth === "" || isFinite(Number(requestedWidth));
    const heightIsValid = requestedHeight === "" || isFinite(Number(requestedHeight));
    if (!(widthIsValid && heightIsValid)) {
      throw new Error("invalid height or width in dimensions, expected unitless [width]x[height]");
    }
    if (Number(requestedWidth)) {
      return [bp, size];
    }
    const derivedWidth = Number(requestedHeight) * (imageField.width / imageField.height);
    return [bp, `${derivedWidth}x${requestedHeight}`];
  });
}
function sizesArrayToString(sizesArray) {
  return sizesArray.map(([bp, sizes]) => {
    const [width, _] = sizes.split("x");
    if (!Number(width)) {
      throw new Error(`couldn't parse width as a number`);
    }
    return `(max-width: ${bp}) ${width}px`;
  }).join(", ");
}
const getDefaultSrc = (imageField) => {
  return imageField.url;
};

var __defProp$8 = Object.defineProperty;
var __getOwnPropSymbols$8 = Object.getOwnPropertySymbols;
var __hasOwnProp$8 = Object.prototype.hasOwnProperty;
var __propIsEnum$8 = Object.prototype.propertyIsEnumerable;
var __defNormalProp$8 = (obj, key, value) => key in obj ? __defProp$8(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues$8 = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp$8.call(b, prop))
      __defNormalProp$8(a, prop, b[prop]);
  if (__getOwnPropSymbols$8)
    for (var prop of __getOwnPropSymbols$8(b)) {
      if (__propIsEnum$8.call(b, prop))
        __defNormalProp$8(a, prop, b[prop]);
    }
  return a;
};
var __objRest$1 = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp$8.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols$8)
    for (var prop of __getOwnPropSymbols$8(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum$8.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
const Image = React.forwardRef((props, ref) => {
  const _a = props, { imageField, bpSizes, customSizes, src, srcSet, sizes, alt = "", loading = "lazy" } = _a, rest = __objRest$1(_a, ["imageField", "bpSizes", "customSizes", "src", "srcSet", "sizes", "alt", "loading"]);
  const _src = src || getDefaultSrc(imageField);
  let sizesArr = [];
  let derivedSizes;
  let derivedSrcSet;
  if (imageField) {
    sizesArr = customSizes || (bpSizes ? transformBpSizes(bpSizes) : sizesArr);
    sizesArr = addWidthToCustomSizes(imageField, sizesArr);
    if (sizesArr && sizesArr.length > 0) {
      derivedSizes = sizesArrayToString(sizesArr);
      derivedSrcSet = getSrcSetFromSizes(imageField.url, sizesArr);
    }
  }
  const _sizes = sizes || derivedSizes;
  const _srcSet = srcSet || derivedSrcSet;
  return /* @__PURE__ */ React.createElement("img", __spreadValues$8({
    ref,
    src: _src,
    srcSet: _srcSet,
    sizes: _sizes,
    alt: alt || "",
    loading: loading || "lazy"
  }, rest));
});

function styleInject(css, ref) {
  if ( ref === void 0 ) ref = {};
  var insertAt = ref.insertAt;

  if (!css || typeof document === 'undefined') { return; }

  var head = document.head || document.getElementsByTagName('head')[0];
  var style = document.createElement('style');
  style.type = 'text/css';

  if (insertAt === 'top') {
    if (head.firstChild) {
      head.insertBefore(style, head.firstChild);
    } else {
      head.appendChild(style);
    }
  } else {
    head.appendChild(style);
  }

  if (style.styleSheet) {
    style.styleSheet.cssText = css;
  } else {
    style.appendChild(document.createTextNode(css));
  }
}

var css_248z$1 = "@layer components {\n\thtml {\n\t\t--yxt-breadcrumbs-spacing: 1rem;\n\t}\n\t\t.Breadcrumbs-list {\n\t\t\tdisplay: flex;\n\t\t}\n\n\t\t.Breadcrumbs-separator {\n\t\t\tmargin: 0 var(--yxt-breadcrumbs-spacing);\n\t\t}\n}";
styleInject(css_248z$1);

var __defProp$7 = Object.defineProperty;
var __getOwnPropSymbols$7 = Object.getOwnPropertySymbols;
var __hasOwnProp$7 = Object.prototype.hasOwnProperty;
var __propIsEnum$7 = Object.prototype.propertyIsEnumerable;
var __defNormalProp$7 = (obj, key, value) => key in obj ? __defProp$7(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues$7 = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp$7.call(b, prop))
      __defNormalProp$7(a, prop, b[prop]);
  if (__getOwnPropSymbols$7)
    for (var prop of __getOwnPropSymbols$7(b)) {
      if (__propIsEnum$7.call(b, prop))
        __defNormalProp$7(a, prop, b[prop]);
    }
  return a;
};
const Breadcrumbs = (props) => {
  const {
    breadcrumbs,
    yaScope,
    className,
    separator = "/"
  } = props;
  return /* @__PURE__ */ React.createElement("nav", {
    className: c("Breadcrumbs", className),
    "data-ya-scope": yaScope || "breadcrumbs",
    "aria-label": "Breadcrumb"
  }, /* @__PURE__ */ React.createElement("ol", {
    className: "Breadcrumbs-list"
  }, breadcrumbs.map(([label, link], idx) => {
    const isLast = idx === breadcrumbs.length - 1;
    return /* @__PURE__ */ React.createElement("li", {
      className: "Breadcrumbs-item",
      key: idx
    }, /* @__PURE__ */ React.createElement(Breadcrumb, __spreadValues$7({
      label,
      link
    }, props)), !isLast && /* @__PURE__ */ React.createElement("span", {
      className: "Breadcrumbs-separator"
    }, separator));
  })));
};
const Breadcrumb = (props) => {
  const { label, link, yaTrack } = props;
  let breadcrumbEl = /* @__PURE__ */ React.createElement("span", {
    className: "Breadcrumbs-label"
  }, label);
  if (link) {
    breadcrumbEl = /* @__PURE__ */ React.createElement(Link$1, {
      className: "Breadcrumbs-link Link--breadcrumbs",
      cta: cta(link),
      yaTrack
    }, breadcrumbEl);
  }
  return breadcrumbEl;
};

const defaultTransformer = (breadcrumbsData) => {
  return breadcrumbsData.dm_directoryParents.map(
    (breadcrumbData) => [breadcrumbData.name, breadcrumbData.slug]
  );
};

var __defProp$6 = Object.defineProperty;
var __getOwnPropSymbols$6 = Object.getOwnPropertySymbols;
var __hasOwnProp$6 = Object.prototype.hasOwnProperty;
var __propIsEnum$6 = Object.prototype.propertyIsEnumerable;
var __defNormalProp$6 = (obj, key, value) => key in obj ? __defProp$6(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues$6 = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp$6.call(b, prop))
      __defNormalProp$6(a, prop, b[prop]);
  if (__getOwnPropSymbols$6)
    for (var prop of __getOwnPropSymbols$6(b)) {
      if (__propIsEnum$6.call(b, prop))
        __defNormalProp$6(a, prop, b[prop]);
    }
  return a;
};
const YextBreadcrumbs = (props) => {
  const { streamsBreadcrumbs } = props;
  const breadcrumbs = defaultTransformer(streamsBreadcrumbs);
  return /* @__PURE__ */ React.createElement(Breadcrumbs, __spreadValues$6({
    breadcrumbs
  }, props));
};

var __defProp$5 = Object.defineProperty;
var __getOwnPropSymbols$5 = Object.getOwnPropertySymbols;
var __hasOwnProp$5 = Object.prototype.hasOwnProperty;
var __propIsEnum$5 = Object.prototype.propertyIsEnumerable;
var __defNormalProp$5 = (obj, key, value) => key in obj ? __defProp$5(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues$5 = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp$5.call(b, prop))
      __defNormalProp$5(a, prop, b[prop]);
  if (__getOwnPropSymbols$5)
    for (var prop of __getOwnPropSymbols$5(b)) {
      if (__propIsEnum$5.call(b, prop))
        __defNormalProp$5(a, prop, b[prop]);
    }
  return a;
};
const MapContext = createContext(null);
function useMapContext() {
  const mapContext = useContext(MapContext);
  if (!mapContext || mapContext.map === void 0) {
    throw new Error("Attempted to call useMapContext() outside of Map.");
  }
  return mapContext.map;
}
const defaultProps$2 = {
  controlEnabled: true,
  defaultCenter: { latitude: 39.83, longitude: -98.58 },
  defaultZoom: 4,
  padding: { bottom: () => 50, left: () => 50, right: () => 50, top: () => 50 },
  panHandler: (previousBounds, currentBounds) => {
  },
  panStartHandler: (currentBounds) => {
  },
  providerOptions: {},
  singlePinZoom: 14
};
const Map = (props) => {
  const { apiKey, bounds, clientKey, controlEnabled, defaultCenter, defaultZoom, padding, panHandler, panStartHandler, provider, providerOptions, singlePinZoom } = props;
  const mapWrapper = useRef(null);
  const [map, setMap] = useState();
  const [mapLoaded, setMapLoaded] = useState(false);
  const [center, setCenter] = useState(defaultCenter);
  const [zoom, setZoom] = useState(defaultZoom);
  const _panHandler = (previousBounds, currentBounds) => {
    panHandler(previousBounds, currentBounds);
    const centerCoordinate = currentBounds.getCenter();
    const centerLat = centerCoordinate.latitude;
    const centerLng = centerCoordinate.longitude;
    setCenter({ latitude: centerLat, longitude: centerLng });
  };
  useEffect(() => {
    if (!mapLoaded || !map)
      return;
    const zoom2 = map.getZoom();
    setZoom(zoom2);
  }, [center]);
  useEffect(() => {
    if (!bounds || !mapLoaded || !map)
      return;
    const coordinates = bounds.map((bound) => new Coordinate(bound));
    map.fitCoordinates(coordinates);
  }, [JSON.stringify(bounds), map]);
  useEffect(() => {
    if (mapLoaded || map || !mapWrapper.current)
      return;
    loadMap();
  }, []);
  useEffect(() => {
    if (!mapLoaded || map)
      return;
    const providerMap = new MapOptions().withControlEnabled(controlEnabled).withDefaultCenter(center).withDefaultZoom(zoom).withPadding(padding).withPanHandler(_panHandler).withPanStartHandler(panStartHandler).withProvider(provider).withProviderOptions(providerOptions).withSinglePinZoom(singlePinZoom).withWrapper(mapWrapper.current).build();
    setMap(providerMap);
  }, [mapLoaded]);
  const loadMap = () => {
    const providerName = provider.getProviderName();
    const loadOptions = providerName === "Google" ? { client: clientKey } : {};
    provider.load(apiKey, __spreadValues$5({}, loadOptions)).then(() => {
      setMapLoaded(true);
    });
  };
  return /* @__PURE__ */ React.createElement("div", {
    className: "dir-map",
    id: "map",
    ref: mapWrapper
  }, map && /* @__PURE__ */ React.createElement(MapContext.Provider, {
    value: {
      map,
      provider
    }
  }, props.children));
};
Map.defaultProps = defaultProps$2;

var __defProp$4 = Object.defineProperty;
var __getOwnPropSymbols$4 = Object.getOwnPropertySymbols;
var __hasOwnProp$4 = Object.prototype.hasOwnProperty;
var __propIsEnum$4 = Object.prototype.propertyIsEnumerable;
var __defNormalProp$4 = (obj, key, value) => key in obj ? __defProp$4(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues$4 = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp$4.call(b, prop))
      __defNormalProp$4(a, prop, b[prop]);
  if (__getOwnPropSymbols$4)
    for (var prop of __getOwnPropSymbols$4(b)) {
      if (__propIsEnum$4.call(b, prop))
        __defNormalProp$4(a, prop, b[prop]);
    }
  return a;
};
const defaultProps$1 = {
  markerClickHandler: (id) => {
  },
  markerHoverHandler: (hovered, id) => {
  },
  markerFocusHandler: (focused, id) => {
  },
  markerStatusOptions: {}
};
const defaultStyle = {
  position: "absolute",
  bottom: 0,
  left: "50%",
  transform: "translateX(-50%)"
};
const Marker = ({ children, coordinate, hideOffscreen, id, mapPinOptions, markerClickHandler, markerFocusHandler, markerHoverHandler, markerStatusOptions, propertiesForStatus, zIndex }) => {
  const { map, provider } = useContext(MapContext);
  const marker = useMemo(() => {
    if (children && coordinate) {
      return new MapPinOptions().withCoordinate(coordinate).withHideOffscreen(hideOffscreen ? hideOffscreen : false).withPropertiesForStatus(propertiesForStatus ? propertiesForStatus : () => new PinProperties()).withProvider(provider).build();
    } else if (mapPinOptions) {
      return mapPinOptions.withProvider(provider).build();
    }
    return null;
  }, []);
  useEffect(() => {
    marker.setStatus(__spreadValues$4({}, markerStatusOptions));
  }, [markerStatusOptions]);
  useEffect(() => {
    if (zIndex !== 0 && !zIndex)
      return;
    const markerWrapper = marker.getProviderPin().getWrapperElement();
    markerWrapper.style.zIndex = zIndex;
  }, [zIndex]);
  useEffect(() => {
    marker.setMap(map);
    marker.setClickHandler(() => {
      markerClickHandler(id);
    });
    marker.setHoverHandler((hovered) => {
      markerHoverHandler(hovered, id);
    });
    marker.setFocusHandler((focused) => {
      markerFocusHandler(focused, id);
    });
    return () => {
      marker.setMap(null);
    };
  }, []);
  if (children) {
    const pinEl = marker.getProviderPin().getPinElement();
    return createPortal(/* @__PURE__ */ React.createElement("div", {
      style: defaultStyle
    }, children), pinEl);
  }
  return null;
};
Marker.defaultProps = defaultProps$1;

var __defProp$3 = Object.defineProperty;
var __getOwnPropSymbols$3 = Object.getOwnPropertySymbols;
var __hasOwnProp$3 = Object.prototype.hasOwnProperty;
var __propIsEnum$3 = Object.prototype.propertyIsEnumerable;
var __defNormalProp$3 = (obj, key, value) => key in obj ? __defProp$3(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues$3 = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp$3.call(b, prop))
      __defNormalProp$3(a, prop, b[prop]);
  if (__getOwnPropSymbols$3)
    for (var prop of __getOwnPropSymbols$3(b)) {
      if (__propIsEnum$3.call(b, prop))
        __defNormalProp$3(a, prop, b[prop]);
    }
  return a;
};
const dayKeys = [
  "sunday",
  "monday",
  "tuesday",
  "wednesday",
  "thursday",
  "friday",
  "saturday"
];
class HoursInterval {
  constructor(date, interval) {
    this.end = new Date(date);
    this.start = new Date(date);
    [interval.start, interval.end].forEach((time) => {
      if (time.split(":").length != 2) {
        throw new Error(`expected interval start and end data to be in the format "HH:MM"`);
      }
    });
    const [startHour, startMinute] = interval.start.split(":");
    const [endHour, endMinute] = interval.end.split(":");
    this.end.setHours(Number(endHour), Number(endMinute));
    this.start.setHours(Number(startHour), Number(startMinute));
    if (this.end < this.start) {
      this.end.setDate(this.end.getDate() + 1);
    }
    if (this.end.getMinutes() == 59) {
      this.end.setMinutes(60);
    }
  }
  contains(date) {
    return this.start <= date && date < this.end;
  }
  getStartTime(locale, opts) {
    const timeOptions = __spreadValues$3({
      hour: "numeric",
      minute: "numeric"
    }, opts);
    return this.start.toLocaleString(locale || "en-US", timeOptions);
  }
  getEndTime(locale, opts) {
    const timeOptions = __spreadValues$3({
      hour: "numeric",
      minute: "numeric"
    }, opts);
    return this.end.toLocaleString(locale || "en-US", timeOptions);
  }
  timeIsEqualTo(other) {
    const startEqual = this.getStartTime() === other.getStartTime();
    const endEqual = this.getEndTime() === other.getEndTime();
    return startEqual && endEqual;
  }
}
class Hours {
  constructor(hours) {
    this.holidayHoursByDate = Object.fromEntries((hours.holidayHours || []).map((hours2) => [hours2.date, hours2]));
    this.hours = hours;
  }
  getInterval(date) {
    if (this.isTemporarilyClosedAt(date)) {
      return null;
    }
    const priorDate = new Date(date);
    priorDate.setDate(priorDate.getDate() - 1);
    for (const hoursDate of [priorDate, date]) {
      const hours = this.getHours(hoursDate);
      if (hours && !hours.isClosed) {
        for (const interval of hours.openIntervals || []) {
          const hoursInterval = new HoursInterval(hoursDate, interval);
          if (hoursInterval.contains(date)) {
            return hoursInterval;
          }
        }
      }
    }
    return null;
  }
  getCurrentInterval() {
    return this.getInterval(new Date());
  }
  getIntervalAfter(date) {
    const intervalsList = this.getIntervalsForNDays(7, date);
    const sortFn = (interval1, interval2) => {
      if (interval1.start === interval2.start)
        return 0;
      return interval1.start > interval2.start ? 1 : -1;
    };
    const sortedIntervals = intervalsList.sort(sortFn);
    for (const [idx, hoursInterval] of sortedIntervals.entries()) {
      if (hoursInterval.contains(date)) {
        if (sortedIntervals.length > idx + 1) {
          return sortedIntervals[idx + 1];
        }
      }
    }
    for (const hoursInterval of sortedIntervals) {
      if (hoursInterval.start > date) {
        return hoursInterval;
      }
    }
    return null;
  }
  getIntervalsForNDays(n, startDate) {
    const intervalsList = [];
    for (let i = 0; i < n; i++) {
      const theDate = new Date(startDate);
      theDate.setDate(theDate.getDate() + i);
      const hours = this.getHours(theDate);
      if (hours && !hours.isClosed) {
        intervalsList.push(...hours.openIntervals.map((interval) => new HoursInterval(theDate, interval)));
      }
    }
    return intervalsList;
  }
  getHolidayHours(date) {
    if (this.isTemporarilyClosedAt(date)) {
      return null;
    }
    return this.holidayHoursByDate[date.toISOString().replace(/T.*/, "")] || null;
  }
  getNormalHours(date) {
    if (this.isTemporarilyClosedAt(date)) {
      return null;
    }
    return this.hours[dayKeys[date.getDay()]];
  }
  getHours(date) {
    return this.getHolidayHours(date) || this.getNormalHours(date);
  }
  getNextInterval() {
    return this.getIntervalAfter(new Date());
  }
  isHoliday(date) {
    return !!this.getHolidayHours(date);
  }
  isTemporarilyClosedAt(targetDate) {
    if (!this.hours.reopenDate) {
      return false;
    }
    const reopenDateParts = this.hours.reopenDate.split("-");
    if (reopenDateParts.length === 3) {
      const [year, month, date] = reopenDateParts;
      const reopenDate = new Date(Number(year), Number(month) - 1, Number(date));
      if (targetDate < reopenDate) {
        return true;
      }
    }
    return false;
  }
  isOpenAt(date) {
    if (this.isTemporarilyClosedAt(date)) {
      return false;
    }
    return !!this.getInterval(date);
  }
  isOpenNow() {
    return this.isOpenAt(new Date());
  }
}
function arrayShift(arr, n) {
  let myArr = [...arr];
  n = n % myArr.length;
  return myArr.concat(myArr.splice(0, myArr.length - n));
}
function intervalsListsAreEqual(il1, il2) {
  if (il1.length != il2.length) {
    return false;
  }
  for (const [idx, interval] of il1.entries()) {
    if (!interval.timeIsEqualTo(il2[idx])) {
      return false;
    }
  }
  return true;
}

var __defProp$2 = Object.defineProperty;
var __getOwnPropSymbols$2 = Object.getOwnPropertySymbols;
var __hasOwnProp$2 = Object.prototype.hasOwnProperty;
var __propIsEnum$2 = Object.prototype.propertyIsEnumerable;
var __defNormalProp$2 = (obj, key, value) => key in obj ? __defProp$2(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues$2 = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp$2.call(b, prop))
      __defNormalProp$2(a, prop, b[prop]);
  if (__getOwnPropSymbols$2)
    for (var prop of __getOwnPropSymbols$2(b)) {
      if (__propIsEnum$2.call(b, prop))
        __defNormalProp$2(a, prop, b[prop]);
    }
  return a;
};
function defaultCurrentTemplate(params) {
  return /* @__PURE__ */ React.createElement("span", {
    className: "HoursStatus-current"
  }, params.isOpen ? "Open Now" : "Closed");
}
function defaultSeparatorTemplate(params) {
  return /* @__PURE__ */ React.createElement("span", {
    className: "HoursStatus-separator"
  }, " - ");
}
function defaultFutureTemplate(params) {
  return /* @__PURE__ */ React.createElement("span", {
    className: "HoursStatus-future"
  }, params.isOpen ? "Closes at" : "Opens at");
}
function defaultTimeTemplate(params) {
  let time = "";
  if (params.isOpen) {
    const interval = params.currentInterval;
    time += interval ? interval.getEndTime("en-US", params.timeOptions) : "";
  } else {
    const interval = params.futureInterval;
    time += interval ? interval.getStartTime("en-US", params.timeOptions) : "";
  }
  return /* @__PURE__ */ React.createElement("span", {
    className: "HoursStatus-time"
  }, " ", time);
}
function defaultDayOfWeekTemplate(params) {
  var _a, _b, _c;
  const dayOptions = __spreadValues$2({
    weekday: "long"
  }, (_a = params.dayOptions) != null ? _a : {});
  let dayOfWeek = "";
  if (params.isOpen) {
    const interval = params.currentInterval;
    dayOfWeek += ((_b = interval == null ? void 0 : interval.end) == null ? void 0 : _b.toLocaleString("en-US", dayOptions)) || "";
  } else {
    const interval = params.futureInterval;
    dayOfWeek += ((_c = interval == null ? void 0 : interval.start) == null ? void 0 : _c.toLocaleString("en-US", dayOptions)) || "";
  }
  return /* @__PURE__ */ React.createElement("span", {
    className: "HoursStatus-dayOfWeek"
  }, " ", dayOfWeek);
}
function defaultStatusTemplate(params, props) {
  const currentTemplate = params.currentTemplate || defaultCurrentTemplate;
  const separatorTemplate = params.separatorTemplate || defaultSeparatorTemplate;
  const futureTemplate = params.futureTemplate || defaultFutureTemplate;
  const timeTemplate = params.timeTemplate || defaultTimeTemplate;
  const dayOfWeekTemplate = params.dayOfWeekTemplate || defaultDayOfWeekTemplate;
  return /* @__PURE__ */ React.createElement("div", {
    className: c("HoursStatus", (props == null ? void 0 : props.className) || "")
  }, currentTemplate(params), separatorTemplate(params), futureTemplate(params), timeTemplate(params), dayOfWeekTemplate(params));
}
const HoursStatus = (props) => {
  const [hasStatusTimeout, setHasStatusTimeout] = useState(false);
  const [isClient, setIsClient] = useState(false);
  useEffect(() => {
    setIsClient(true);
  }, []);
  const statusTemplateFn = props.statusTemplate || defaultStatusTemplate;
  const h = new Hours(props.hours);
  const isOpen = h.isOpenNow();
  const currentInterval = h.getCurrentInterval();
  const futureInterval = h.getNextInterval();
  const isOpenChangeTime = (currentInterval == null ? void 0 : currentInterval.end) || (futureInterval == null ? void 0 : futureInterval.start);
  if (isOpenChangeTime && !hasStatusTimeout) {
    setHasStatusTimeout(true);
    const delayMS = isOpenChangeTime.getTime() - new Date().getTime();
    setTimeout(() => setHasStatusTimeout(false), delayMS);
  }
  const statusParams = __spreadValues$2({
    isOpen,
    currentInterval,
    futureInterval
  }, props);
  return /* @__PURE__ */ React.createElement(React.Fragment, null, isClient && statusTemplateFn(statusParams, props));
};

var css_248z = "@layer components {\n  html {\n    --yxt-hoursTable-col1-width: 128px;\n    --yxt-hoursTable-col2-width: 256px;\n  }\n  \n  .HoursTable-row {\n    display: flex;\n  }\n  \n  .HoursTable-day {\n    flex: 0 0 var(--yxt-hoursTable-col1-width);\n  }\n  \n  .HoursTable-intervals {\n    display: flex;\n    flex-direction: column;\n    flex: 0 0 var(--yxt-hoursTable-col2-width);\n  }\n}\n";
styleInject(css_248z);

var __defProp$1 = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols$1 = Object.getOwnPropertySymbols;
var __hasOwnProp$1 = Object.prototype.hasOwnProperty;
var __propIsEnum$1 = Object.prototype.propertyIsEnumerable;
var __defNormalProp$1 = (obj, key, value) => key in obj ? __defProp$1(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues$1 = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp$1.call(b, prop))
      __defNormalProp$1(a, prop, b[prop]);
  if (__getOwnPropSymbols$1)
    for (var prop of __getOwnPropSymbols$1(b)) {
      if (__propIsEnum$1.call(b, prop))
        __defNormalProp$1(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
const defaultDayOfWeekNames = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"];
const defaultDayOfWeekSortIdx = [0, 1, 2, 3, 4, 5, 6];
function getSortIdx(props, todayDate) {
  let startIdx = 0;
  if (props.startOfWeek === "Today") {
    startIdx = todayDate.getDay();
    return arrayShift(defaultDayOfWeekSortIdx, startIdx);
  } else if (props.startOfWeek) {
    startIdx = defaultDayOfWeekNames.indexOf(props.startOfWeek);
    return arrayShift(defaultDayOfWeekSortIdx, startIdx);
  } else {
    return defaultDayOfWeekSortIdx;
  }
}
function collapseDays(hoursDays) {
  let collapsedDays = [];
  hoursDays.forEach((hoursDay) => {
    const latestGroup = collapsedDays[collapsedDays.length - 1];
    if (!latestGroup) {
      collapsedDays.push(__spreadValues$1({
        startDay: hoursDay.dayOfWeek,
        endDay: hoursDay.dayOfWeek
      }, hoursDay));
    } else {
      if (intervalsListsAreEqual(latestGroup.intervals, hoursDay.intervals)) {
        latestGroup.endDay = hoursDay.dayOfWeek;
        latestGroup.isToday = latestGroup.isToday || hoursDay.isToday;
      } else {
        collapsedDays.push(__spreadValues$1({
          startDay: hoursDay.dayOfWeek,
          endDay: hoursDay.dayOfWeek
        }, hoursDay));
      }
    }
  });
  return collapsedDays.map((day) => __spreadProps(__spreadValues$1({}, day), {
    dayOfWeek: day.startDay === day.endDay ? `${day.startDay}` : `${day.startDay} - ${day.endDay}`
  }));
}
function defaultIntervalStringsBuilder(dayData, timeOptions) {
  let intervalStrings = [];
  if (dayData.intervals.length === 0) {
    intervalStrings.push("Closed");
  } else {
    dayData.intervals.forEach((interval) => {
      let startTime = interval.getStartTime("en-US", timeOptions);
      let endTime = interval.getEndTime("en-US", timeOptions);
      intervalStrings.push(`${startTime} - ${endTime}`);
    });
  }
  return intervalStrings;
}
function dayOfWeekNamesToArray(nameMap) {
  return [
    nameMap.Sunday || defaultDayOfWeekNames[0],
    nameMap.Monday || defaultDayOfWeekNames[1],
    nameMap.Tuesday || defaultDayOfWeekNames[2],
    nameMap.Wednesday || defaultDayOfWeekNames[3],
    nameMap.Thursday || defaultDayOfWeekNames[4],
    nameMap.Friday || defaultDayOfWeekNames[5],
    nameMap.Saturday || defaultDayOfWeekNames[6]
  ];
}
const HoursTable = (props) => {
  const [isClient, setIsClient] = useState(false);
  useEffect(() => {
    setIsClient(true);
  }, []);
  const h = new Hours(props.hours);
  const now = new Date();
  const dayOfWeekNames = props.dayOfWeekNames ? dayOfWeekNamesToArray(props.dayOfWeekNames) : defaultDayOfWeekNames;
  const dayOfWeekSortIdx = getSortIdx(props, new Date());
  const allIntervals = h.getIntervalsForNDays(7, now);
  let hoursDays = [];
  for (let i = 0; i < 7; i++) {
    hoursDays.push({
      dayOfWeek: dayOfWeekNames[i],
      sortIdx: dayOfWeekSortIdx[i],
      intervals: allIntervals.filter((interval) => interval.start.getDay() === i),
      isToday: now.getDay() === i
    });
  }
  const sortFn = (day1, day2) => {
    if (day1.sortIdx === day2.sortIdx) {
      return 0;
    }
    return day1.sortIdx > day2.sortIdx ? 1 : -1;
  };
  hoursDays.sort(sortFn);
  if (props.collapseDays) {
    hoursDays = collapseDays(hoursDays);
  }
  return /* @__PURE__ */ React.createElement(React.Fragment, null, isClient && /* @__PURE__ */ React.createElement("div", {
    className: c("HoursTable", props.className)
  }, hoursDays.map((dayData) => {
    const intervalStringsBuilderFn = props.intervalStringsBuilderFn || defaultIntervalStringsBuilder;
    const intervalStrings = intervalStringsBuilderFn(dayData, props.timeOptions);
    return /* @__PURE__ */ React.createElement("div", {
      className: c("HoursTable-row", { "is-today": dayData.isToday }),
      key: dayData.sortIdx
    }, /* @__PURE__ */ React.createElement("span", {
      className: "HoursTable-day"
    }, dayData.dayOfWeek), /* @__PURE__ */ React.createElement("span", {
      className: "HoursTable-intervals"
    }, intervalStrings.map(
      (intervalString, idx) => /* @__PURE__ */ React.createElement("span", {
        className: "HoursTable-interval",
        key: idx
      }, intervalString)
    )));
  })));
};

var __defProp = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
const defaultProps = {
  controlEnabled: false,
  markerClickHandler: (id) => {
  },
  markerHoverHandler: (hovered, id) => {
  },
  markerFocusHandler: (focused, id) => {
  }
};
const LocationMap = (props) => {
  const _a = props, { children, coordinate, controlEnabled, linkSameTab, pinUrl, markerClickHandler, markerHoverHandler, markerFocusHandler } = _a, rest = __objRest(_a, ["children", "coordinate", "controlEnabled", "linkSameTab", "pinUrl", "markerClickHandler", "markerHoverHandler", "markerFocusHandler"]);
  return /* @__PURE__ */ React.createElement(Map, __spreadValues({
    bounds: [coordinate],
    controlEnabled
  }, rest), /* @__PURE__ */ React.createElement(Marker, {
    coordinate,
    id: "location-map-marker",
    markerClickHandler,
    markerHoverHandler,
    markerFocusHandler
  }, /* @__PURE__ */ React.createElement(React.Fragment, null, pinUrl && /* @__PURE__ */ React.createElement(Link$1, {
    href: pinUrl,
    target: linkSameTab ? "_self" : "_blank"
  }, children), !pinUrl && children)));
};
LocationMap.defaultProps = defaultProps;

function addressForCountry(props) {
  switch (props) {
    case "AD":
    case "AM":
    case "AT":
    case "AX":
    case "AZ":
    case "BA":
    case "BY":
    case "CY":
    case "CZ":
    case "DK":
    case "DZ":
    case "EC":
    case "EH":
    case "ET":
    case "FI":
    case "FR":
    case "GE":
    case "GF":
    case "GI":
    case "GP":
    case "GW":
    case "HT":
    case "KE":
    case "KV":
    case "KW":
    case "LA":
    case "LU":
    case "MC":
    case "MD":
    case "ME":
    case "MG":
    case "MK":
    case "MQ":
    case "MZ":
    case "NC":
    case "NL":
    case "NO":
    case "PL":
    case "PT":
    case "PY":
    case "RE":
    case "RS":
    case "SA":
    case "SE":
    case "SJ":
    case "SM":
    case "SN":
    case "TC":
    case "TJ":
    case "TM":
    case "TN":
    case "TZ":
    case "UY":
    case "VG":
    case "ZM":
      return [["line1"], ["line2"], ["postalCode", "city"], ["countryCode"]];
    case "AF":
    case "IR":
      return [["line1"], ["line2"], ["city"], ["region"], ["postalCode"], ["countryCode"]];
    case "AG":
    case "AO":
    case "AW":
    case "BJ":
    case "BO":
    case "BS":
    case "BZ":
    case "CI":
    case "CW":
    case "DJ":
    case "FJ":
    case "GA":
    case "GH":
    case "GM":
    case "GY":
    case "JM":
    case "KI":
    case "LY":
    case "MW":
    case "NA":
    case "NR":
    case "PS":
    case "QA":
    case "RW":
    case "SC":
    case "SR":
    case "SX":
    case "TG":
    case "TT":
    case "UG":
    case "VU":
      return [["line1"], ["line2"], ["city"], ["countryCode"]];
    case "AL":
    case "EE":
    case "IS":
      return [["line1"], ["line2"], ["postalCode", "city"]];
    case "AR":
      return [["line1"], ["line2"], ["postalCode", "city", ",", "region"], ["countryCode"]];
    case "AS":
    case "BB":
    case "BD":
    case "BM":
    case "BN":
    case "BT":
    case "CR":
    case "DO":
    case "FK":
    case "FM":
    case "GR":
    case "GU":
    case "JO":
    case "KZ":
    case "LB":
    case "LK":
    case "LS":
    case "MA":
    case "MH":
    case "MM":
    case "MR":
    case "MT":
    case "MV":
    case "NG":
    case "PG":
    case "PK":
    case "PR":
    case "RO":
    case "SG":
    case "VC":
    case "WS":
      return [["line1"], ["line2"], ["city", "postalCode"], ["countryCode"]];
    case "AU":
    case "CA":
    case "SZ":
    case "US":
    case "VI":
      return [["line1"], ["line2"], ["city", ",", "region", "postalCode"], ["countryCode"]];
    case "BE":
    case "PE":
      return [["line1"], ["line2"], ["postalCode", "subLocality", "city"], ["countryCode"]];
    case "BF":
    case "BI":
    case "BQ":
    case "BW":
    case "CF":
    case "CG":
    case "CM":
    case "DM":
    case "ER":
    case "GQ":
    case "KM":
    case "ML":
    case "SY":
    case "TD":
    case "ZW":
      return [["line1"], ["line2"], ["city"], ["region"], ["countryCode"]];
    case "BG":
      return [["line1"], ["postalCode", "region"], ["countryCode"]];
    case "BH":
      return [["line1"], ["line2"], ["subLocality", "city"], ["countryCode"]];
    case "BR":
      return [["line1"], ["line2"], ["subLocality"], ["city", "region"], ["postalCode"], ["countryCode"]];
    case "CH":
    case "DE":
    case "GT":
    case "IT":
    case "LI":
    case "MY":
    case "NI":
    case "OM":
    case "SK":
    case "VA":
      return [["line1"], ["line2"], ["postalCode", "city", "region"], ["countryCode"]];
    case "CL":
    case "PF":
      return [["line1"], ["line2"], ["city", "postalCode", "region"], ["countryCode"]];
    case "CN":
      return [["region", "city", "sublocality"], ["line1"], ["line2"], ["countryCode"]];
    case "CO":
    case "ID":
    case "IQ":
    case "KH":
    case "MP":
    case "NP":
    case "PW":
    case "UA":
      return [["line1"], ["line2"], ["city", "region", "postalCode"], ["countryCode"]];
    case "EG":
      return [["line1"], ["line2"], ["sublocality", "city", "region", "postalCode"], ["countryCode"]];
    case "ES":
    case "IL":
      return [["line1"], ["line2"], ["city", "postalCode"], ["region"], ["countryCode"]];
    case "GB":
    case "MN":
    case "ZA":
      return [["line1"], ["line2"], ["sublocality", "city", "postalCode"], ["countryCode"]];
    case "GG":
    case "IM":
    case "JE":
      return [["line1"], ["line2"], ["sublocality"], ["city"], ["postalCode"], ["countryCode"]];
    case "GN":
      return [["line1", "line2", "city"], ["countryCode"]];
    case "HK":
      return [["line1"], ["line2"], ["sublocality"], ["city"], ["region"], ["countryCode"]];
    case "HR":
      return [["line1"], ["postalCode", "city", "region"], ["countryCode"]];
    case "HU":
    case "SI":
      return [["postalCode", "city"], ["line1"], ["line2"], ["countryCode"]];
    case "IE":
      return [["line1"], ["line2"], ["sublocality"], ["city", "region", "postalCode"], ["countryCode"]];
    case "IN":
    case "VE":
      return [["line1"], ["line2"], ["city", "postalCode"], ["region"], ["countryCode"]];
    case "JP":
      return [["line2"], ["line1", "sublocality"], ["city", "region"], ["postalCode"], ["countryCode"]];
    case "KR":
      return [["countryCode"], ["region", "city", "sublocality", "line1"], ["line2"], ["postalCode"]];
    case "KY":
      return [["line1"], ["line2"], ["postalCode"], ["countryCode"]];
    case "LT":
      return [["line1"], ["postalCode", "city", "sublocality", "region"], ["countryCode"]];
    case "LV":
      return [["line1"], ["city", ",", "postalCode"], ["countryCode"]];
    case "MO":
      return [["line1"], ["line2"], ["sublocality"], ["city"], ["countryCode"]];
    case "MU":
      return [["line1"], ["line2"], ["city"], ["region", "postalCode"], ["countryCode"]];
    case "MX":
      return [["line1"], ["line2"], ["sublocality"], ["postalCode", "city", ",", "region"], ["countryCode"]];
    case "NE":
    case "SD":
      return [["line1"], ["line2"], ["postalCode"], ["city"], ["region"], ["countryCode"]];
    case "NZ":
      return [["line1"], ["line2"], ["sublocality"], ["city"], ["postalCode"], ["countryCode"]];
    case "PH":
    case "TW":
    case "VN":
      return [["line1"], ["line2"], ["sublocality", "city"], ["region", "postalCode"], ["countryCode"]];
    case "RU":
      return [["line1"], ["line2"], ["city"], ["postalCode"], ["countryCode"]];
    case "SB":
    case "SL":
    case "ST":
    case "TL":
    case "TO":
    case "TV":
      return [["line1"], ["line2"], ["city", ",", "region"], ["countryCode"]];
    case "TH":
    case "TR":
      return [["line1"], ["line2"], ["sublocality"], ["postalCode", "city"], ["countryCode"]];
    case "UZ":
      return [["line1"], ["line2"], ["region", "postalCode"], ["countryCode"]];
  }
  return [["line1", "line2"], ["city", "region", "postalCode"], ["countryCode"]];
}

const Address = (props) => {
  var _a;
  const { address, linkToGetDirections, yaTrack } = props;
  let linesDefault = addressForCountry((_a = props.address) == null ? void 0 : _a.countryCode);
  let lines = (props == null ? void 0 : props.lines) ? props.lines : linesDefault;
  const addressDom = lines.map((line) => /* @__PURE__ */ React.createElement(AddressLine, {
    addressProps: props,
    line
  }));
  let addressEl = /* @__PURE__ */ React.createElement("div", {
    className: "Address-content",
    "data-country": address.countryCode
  }, addressDom);
  if (linkToGetDirections) {
    addressEl = /* @__PURE__ */ React.createElement(Link$1, {
      className: "Address-getDirectionLink",
      href: linkToGetDirections,
      yaTrack
    }, addressEl);
  }
  return addressEl;
};
const AddressLine = (props) => {
  var _a, _b, _c;
  let lineDom = [];
  (_a = props == null ? void 0 : props.line) == null ? void 0 : _a.map((field) => {
    var _a2, _b2, _c2, _d, _e, _f, _g, _h, _i, _j, _k;
    if (field == "city") {
      lineDom.push(/* @__PURE__ */ React.createElement(AddressCity, {
        address: (_a2 = props == null ? void 0 : props.addressProps) == null ? void 0 : _a2.address
      }));
    } else if (field == "country") {
      lineDom.push(/* @__PURE__ */ React.createElement(AddressCountry, {
        address: (_b2 = props == null ? void 0 : props.addressProps) == null ? void 0 : _b2.address,
        abbr: false
      }));
    } else if (field == "countryCode") {
      lineDom.push(/* @__PURE__ */ React.createElement(AddressCountry, {
        address: (_c2 = props == null ? void 0 : props.addressProps) == null ? void 0 : _c2.address,
        abbr: true
      }));
    } else if (field == "extraDescription") {
      lineDom.push(/* @__PURE__ */ React.createElement(AddressExtraDescription, {
        address: (_d = props == null ? void 0 : props.addressProps) == null ? void 0 : _d.address
      }));
    } else if (field == "line1") {
      lineDom.push(/* @__PURE__ */ React.createElement(AddressLine1, {
        address: (_e = props == null ? void 0 : props.addressProps) == null ? void 0 : _e.address
      }));
    } else if (field == "line2") {
      lineDom.push(/* @__PURE__ */ React.createElement(AddressLine2, {
        address: (_f = props == null ? void 0 : props.addressProps) == null ? void 0 : _f.address
      }));
    } else if (field == "line3") {
      lineDom.push(/* @__PURE__ */ React.createElement(AddressLine3, {
        address: (_g = props == null ? void 0 : props.addressProps) == null ? void 0 : _g.address
      }));
    } else if (field == "postalCode") {
      lineDom.push(/* @__PURE__ */ React.createElement(AddressPostalCode, {
        address: (_h = props == null ? void 0 : props.addressProps) == null ? void 0 : _h.address
      }));
    } else if (field == "region") {
      lineDom.push(/* @__PURE__ */ React.createElement(AddressRegion, {
        address: (_i = props == null ? void 0 : props.addressProps) == null ? void 0 : _i.address
      }));
    } else if (field == "regionCode") {
      lineDom.push(/* @__PURE__ */ React.createElement(AddressRegion, {
        address: (_j = props == null ? void 0 : props.addressProps) == null ? void 0 : _j.address,
        abbr: true
      }));
    } else if (field == "sublocality") {
      lineDom.push(/* @__PURE__ */ React.createElement(AddressSublocality, {
        address: (_k = props == null ? void 0 : props.addressProps) == null ? void 0 : _k.address
      }));
    } else {
      lineDom.push(/* @__PURE__ */ React.createElement(React.Fragment, null, field));
    }
  });
  let modifiedAddressDom = [];
  for (var i = 0; i < lineDom.length; i++) {
    let e = lineDom[i];
    if (i != 0 && e != null && ((_b = e.props) == null ? void 0 : _b.children) != ",") {
      modifiedAddressDom.push(/* @__PURE__ */ React.createElement(React.Fragment, null, " "));
    }
    modifiedAddressDom.push(e);
  }
  return /* @__PURE__ */ React.createElement("div", {
    className: "Address-line",
    key: (_c = props == null ? void 0 : props.line) == null ? void 0 : _c.toString()
  }, modifiedAddressDom);
};
const AddressLine1 = (props) => {
  var _a;
  return ((_a = props.address) == null ? void 0 : _a.line1) ? /* @__PURE__ */ React.createElement("span", {
    className: "Address-field Address-line1",
    key: "addressline1"
  }, props.address.line1) : null;
};
const AddressLine2 = (props) => {
  var _a;
  return ((_a = props.address) == null ? void 0 : _a.line2) ? /* @__PURE__ */ React.createElement("span", {
    className: "Address-field Address-line2",
    key: "addressline2"
  }, props.address.line2) : null;
};
const AddressLine3 = (props) => {
  var _a;
  return ((_a = props.address) == null ? void 0 : _a.line3) ? /* @__PURE__ */ React.createElement("span", {
    className: "Address-field Address-line3",
    key: "addressline3"
  }, props.address.line3) : null;
};
const AddressPostalCode = (props) => {
  var _a;
  return ((_a = props.address) == null ? void 0 : _a.postalCode) ? /* @__PURE__ */ React.createElement("span", {
    className: "Address-field Address-postalCode",
    key: "addresspostalcode"
  }, props.address.postalCode) : null;
};
const AddressSublocality = (props) => {
  var _a;
  return ((_a = props.address) == null ? void 0 : _a.sublocality) ? /* @__PURE__ */ React.createElement("span", {
    className: "Address-field Address-sublocality",
    key: "addresssublocality"
  }, props.address.sublocality) : null;
};
const AddressCity = (props) => {
  var _a;
  return ((_a = props.address) == null ? void 0 : _a.city) ? /* @__PURE__ */ React.createElement("span", {
    className: "Address-field Address-city",
    key: "addresscity"
  }, props.address.city) : null;
};
const AddressRegion = (props) => {
  var _a, _b;
  let region = ((_a = props.address) == null ? void 0 : _a.region) ? props.address.region : "";
  let regionName = ((_b = props.address) == null ? void 0 : _b.localizedRegionName) ? props.address.localizedRegionName : region;
  if (region != "") {
    if (props.abbr) {
      return /* @__PURE__ */ React.createElement("abbr", {
        className: "Address-field Address-region Address-region--code",
        title: regionName,
        key: "addressregion"
      }, region);
    } else {
      return /* @__PURE__ */ React.createElement("span", {
        className: "Address-field Address-region Address-region",
        title: regionName,
        key: "addressregion"
      }, regionName);
    }
  }
  return null;
};
const AddressCountry = (props) => {
  var _a, _b;
  let countryCode = ((_a = props.address) == null ? void 0 : _a.countryCode) ? props.address.countryCode : "";
  let countryName = ((_b = props.address) == null ? void 0 : _b.localizedCountryName) ? props.address.localizedCountryName : countryCode;
  if (countryCode != "") {
    if (props.abbr) {
      return /* @__PURE__ */ React.createElement("abbr", {
        className: "Address-field Address-country Address-country--code",
        title: countryName,
        key: "addresscountry"
      }, countryCode);
    } else {
      return /* @__PURE__ */ React.createElement("span", {
        className: "Address-field Address-country Address-country",
        key: "addresscountry"
      }, countryName);
    }
  }
  return null;
};
const AddressExtraDescription = (props) => {
  var _a;
  return ((_a = props.address) == null ? void 0 : _a.extraDescription) ? /* @__PURE__ */ React.createElement("span", {
    className: "Address-field Address-extraDescription",
    key: "addressextradescription"
  }, props.address.extraDescription) : null;
};

const getDirections = (profile, provider, directions) => {
  if (!profile.ref_listings && !profile.address)
    return void 0;
  const { address } = profile;
  let query = encodeArray([address == null ? void 0 : address.line1, address == null ? void 0 : address.line2, address == null ? void 0 : address.city, address == null ? void 0 : address.region, address == null ? void 0 : address.postalCode, address == null ? void 0 : address.countryCode]);
  switch (provider) {
    case "APPLE":
      return getDirectionsApple(query, directions);
    case "BING":
      query = encodeArray([address == null ? void 0 : address.line1, address == null ? void 0 : address.city, address == null ? void 0 : address.region, address == null ? void 0 : address.postalCode]);
      return getDirectionsBing(query, directions);
    default:
      const gmbURL = getlistingUrl(profile.ref_listings, "googlemybusiness" /* googlemybusiness */);
      if (gmbURL) {
        return gmbURL;
      }
      if (profile.googlePlaceId) {
        return getDirectionsGooglePlaceID(profile.googlePlaceId, query, directions);
      }
      return getDirectionsGoogle(query, directions);
  }
};
const getDirectionsApple = (query, directions) => {
  return directions ? `https://maps.apple.com/?daddr=${query}` : `https://maps.apple.com/?address=${query}`;
};
const getDirectionsBing = (query, directions) => {
  return directions ? `https://bing.com/maps/default.aspx?rtp=adr.${query}` : `https://bing.com/maps/default.aspx?where1=${query}`;
};
const getDirectionsGooglePlaceID = (placeId, query, directions) => {
  return directions ? `https://maps.google.com/maps/dir/?api=1&destination_place_id=${placeId}&destination=direct` : `https://maps.google.com/maps/search/?api=1&query=${query}&query_place_id=${placeId}`;
};
const getDirectionsGoogle = (query, directions) => {
  return directions ? `https://maps.google.com/maps/dir/?api=1&destination=${query}` : `https://maps.google.com/maps/search/?api=1&query=${query}`;
};
const getlistingUrl = (listings = [], publisher) => {
  const gmb = listings.find((l) => l.publisher === publisher);
  return gmb == null ? void 0 : gmb.listingUrl;
};
const encodeArray = (substrings = []) => {
  if (!substrings.length)
    return "";
  const str = substrings.filter(Boolean).join(", ");
  return encodeURI(str);
};

export { Address, YextBreadcrumbs as Breadcrumbs, Button, ConfigurationProvider, Breadcrumbs as CustomBreadcrumbs, Hours, HoursInterval, HoursStatus, HoursTable, Image, Link$1 as Link, LocationMap, Map, Marker, arrayShift, defaultStatusTemplate, getDirections, intervalsListsAreEqual, useGlobal, useMapContext };
//# sourceMappingURL=index.mjs.map
