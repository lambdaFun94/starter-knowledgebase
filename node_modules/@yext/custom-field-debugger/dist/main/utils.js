function makeID(length) {
  const characters = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
  let result = "";
  let charactersLength = characters.length;
  for (let i = 0; i < length; i++) {
    result += characters.charAt(Math.floor(Math.random() * charactersLength));
  }
  return result;
}
function makeNumber(length) {
  const characters = "123456789";
  let result = "";
  let charactersLength = characters.length;
  for (let i = 0; i < length; i++) {
    result += characters.charAt(Math.floor(Math.random() * charactersLength));
  }
  return Number(result);
}
function randomizeHours() {
  return {
    sunday: {
      isClosed: false,
      openIntervals: [{ start: "1:01", end: "1:02" }]
    },
    monday: {
      isClosed: false,
      openIntervals: [{ start: "1:03", end: "1:04" }]
    },
    tuesday: {
      isClosed: false,
      openIntervals: [{ start: "1:05", end: "1:06" }]
    },
    wednesday: {
      isClosed: false,
      openIntervals: [{ start: "1:07", end: "1:08" }]
    },
    thursday: {
      isClosed: false,
      openIntervals: [{ start: "1:09", end: "1:10" }]
    },
    friday: {
      isClosed: false,
      openIntervals: [{ start: "1:11", end: "1:12" }]
    },
    saturday: {
      isClosed: false,
      openIntervals: [{ start: "1:13", end: "1:14" }]
    }
  };
}
function randomize(v) {
  if (typeof v === "string")
    return makeID(12);
  if (typeof v === "number")
    return makeNumber(12);
  if (Array.isArray(v))
    return v.map(randomize);
  if (typeof v === "object")
    return Object.keys(v).reduce(
      (out, key) => ({
        ...out,
        [key]: key === "hours" ? randomizeHours() : randomize(v[key])
      }),
      {}
    );
}
function flattenObj(input, parentKey = "") {
  let flattened = {};
  Object.entries(input).forEach(([key, val]) => {
    if (typeof val === "object") {
      flattened = {
        ...flattened,
        ...flattenObj(val, `${parentKey}${key}.`)
      };
    } else {
      flattened[`${parentKey}${key}`] = val;
    }
  });
  return flattened;
}
function getDOMNodeAddress(node, addressIndices = []) {
  if (!node.parentNode) {
    let selector = "html";
    addressIndices.shift();
    addressIndices.forEach((index) => {
      if (index != -1) {
        selector = `${selector} > :nth-child(${index + 1})`;
      }
    });
    return selector;
  }
  if (node instanceof HTMLElement) {
    const siblingIndex = Array.from(node.parentNode.children).indexOf(node);
    return getDOMNodeAddress(node.parentNode, [
      siblingIndex,
      ...addressIndices
    ]);
  } else {
    return getDOMNodeAddress(node.parentNode, [-1, ...addressIndices]);
  }
}
export {
  flattenObj,
  getDOMNodeAddress,
  makeID,
  makeNumber,
  randomize,
  randomizeHours
};
