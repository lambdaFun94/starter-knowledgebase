import * as React$1 from 'react';
import React__default, { ReactNode } from 'react';
import { CTA, Image as Image$1, Coordinate, OpenIntervals, Holiday, Hours as Hours$1, Day } from '@yext/types';
import styleInject from '../node_modules/style-inject/dist/style-inject.es.js';
import { MapProvider, Map as Map$1, MapPinOptions, PinProperties } from '@yext/components-tsx-maps';
import { GeoBounds } from '@yext/components-tsx-geo';

interface LinkConfig extends React__default.DetailedHTMLProps<React__default.AnchorHTMLAttributes<HTMLAnchorElement>, HTMLAnchorElement>, StandardProps {
    linkType?: Yext.LinkType;
    obfuscate?: boolean;
}
interface HREFLinkProps extends LinkConfig {
    href: string;
    cta: never;
}
interface CTALinkProps extends LinkConfig {
    href: never;
    cta: CTA;
}
declare type LinkProps = CTALinkProps | HREFLinkProps;
declare let Link: any | React__default.ForwardRefRenderFunction<HTMLAnchorElement, LinkProps>;

interface StandardProps {
    yaTrack?: string;
    yaScope?: string;
}
declare namespace Yext {
    type LinkType = 'URL' | 'Email' | 'Phone';
    interface CTA {
        link: string;
        label: string;
        linkType?: LinkType;
    }
}
declare type ConfigPartial<Type> = {
    [Key in keyof Type]?: Type[Key];
};
interface ComponentProps {
    Link?: ConfigPartial<LinkProps>;
}
interface ConfigurationProviderContextType {
    components: ComponentProps;
}

interface ButtonProps extends StandardProps {
    onClick: () => void;
    a?: number;
    b?: number;
}
declare const Button: React__default.FC<ButtonProps>;

interface ImagePropsShared extends React__default.DetailedHTMLProps<React__default.ImgHTMLAttributes<HTMLImageElement>, HTMLImageElement>, StandardProps {
    bpSizes?: [string, string, string];
    customSizes?: Array<[string, string]>;
}
interface ImagePropsWithSrc extends ImagePropsShared {
    src: string;
    imageField?: never;
}
interface ImagePropsWithField extends ImagePropsShared {
    src?: never;
    imageField: Image$1;
}
/**
 * The 'Image' component is used to render an HTML <image> element
 *
 * @example
 * ```
 * <Image src="https://via.placeholder.com/400x600" />
 * <Image imageField={profile.c_heroImage} />
 * <Image imageField={profile.c_heroImage} bpSizes={['400x, '600x400', 'x800']} />
 * ```
 *
 * @param {ImageType} imageField
 *          Yext Image field, used to generate `src` (and `srcSet`, `sizes` if [bpSizes | customSizes] are specified).
 * @param {[string, string, string]} bpSizes
 *          Size of requested image at breakpoints [sm, md, lg]. Size in pixels should be unitless in the format `[width]x[height]` ex. `400x600` `400x` `x600`
 * @param {[[string, string]]} customSizes
 *          Expects format `[[bp, size], ['600px', '300x400'], ...]`.  Like bpSizes, but you can define the breakpoints yourself.
 * @param {string} src
 *          HTML attribute. This overrides the generated value from imageField.
 * @param {string} srcSet
 *          HTML attribute. This overrides the generated value from [bpSizes | customSizes].
 * @param {string} sizes
 *          HTML attribute. This overrides the generated value from [bpSizes | customSizes].
 * @param {string} alt
 *          HTML attribute. Defaults to empty string
 * @param {string} loading
 *          HTML attribute. Defaults to 'lazy'
 *
 * @returns {Image}
 */
declare const Image: React__default.ForwardRefExoticComponent<(Pick<ImagePropsWithSrc, "children" | "key" | "referrerPolicy" | "defaultChecked" | "defaultValue" | "suppressContentEditableWarning" | "suppressHydrationWarning" | "accessKey" | "className" | "contentEditable" | "contextMenu" | "dir" | "draggable" | "hidden" | "id" | "lang" | "placeholder" | "slot" | "spellCheck" | "style" | "tabIndex" | "title" | "translate" | "radioGroup" | "role" | "about" | "datatype" | "inlist" | "prefix" | "property" | "resource" | "typeof" | "vocab" | "autoCapitalize" | "autoCorrect" | "autoSave" | "color" | "itemProp" | "itemScope" | "itemType" | "itemID" | "itemRef" | "results" | "security" | "unselectable" | "inputMode" | "is" | "aria-activedescendant" | "aria-atomic" | "aria-autocomplete" | "aria-busy" | "aria-checked" | "aria-colcount" | "aria-colindex" | "aria-colspan" | "aria-controls" | "aria-current" | "aria-describedby" | "aria-details" | "aria-disabled" | "aria-dropeffect" | "aria-errormessage" | "aria-expanded" | "aria-flowto" | "aria-grabbed" | "aria-haspopup" | "aria-hidden" | "aria-invalid" | "aria-keyshortcuts" | "aria-label" | "aria-labelledby" | "aria-level" | "aria-live" | "aria-modal" | "aria-multiline" | "aria-multiselectable" | "aria-orientation" | "aria-owns" | "aria-placeholder" | "aria-posinset" | "aria-pressed" | "aria-readonly" | "aria-relevant" | "aria-required" | "aria-roledescription" | "aria-rowcount" | "aria-rowindex" | "aria-rowspan" | "aria-selected" | "aria-setsize" | "aria-sort" | "aria-valuemax" | "aria-valuemin" | "aria-valuenow" | "aria-valuetext" | "dangerouslySetInnerHTML" | "onCopy" | "onCopyCapture" | "onCut" | "onCutCapture" | "onPaste" | "onPasteCapture" | "onCompositionEnd" | "onCompositionEndCapture" | "onCompositionStart" | "onCompositionStartCapture" | "onCompositionUpdate" | "onCompositionUpdateCapture" | "onFocus" | "onFocusCapture" | "onBlur" | "onBlurCapture" | "onChange" | "onChangeCapture" | "onBeforeInput" | "onBeforeInputCapture" | "onInput" | "onInputCapture" | "onReset" | "onResetCapture" | "onSubmit" | "onSubmitCapture" | "onInvalid" | "onInvalidCapture" | "onLoad" | "onLoadCapture" | "onError" | "onErrorCapture" | "onKeyDown" | "onKeyDownCapture" | "onKeyPress" | "onKeyPressCapture" | "onKeyUp" | "onKeyUpCapture" | "onAbort" | "onAbortCapture" | "onCanPlay" | "onCanPlayCapture" | "onCanPlayThrough" | "onCanPlayThroughCapture" | "onDurationChange" | "onDurationChangeCapture" | "onEmptied" | "onEmptiedCapture" | "onEncrypted" | "onEncryptedCapture" | "onEnded" | "onEndedCapture" | "onLoadedData" | "onLoadedDataCapture" | "onLoadedMetadata" | "onLoadedMetadataCapture" | "onLoadStart" | "onLoadStartCapture" | "onPause" | "onPauseCapture" | "onPlay" | "onPlayCapture" | "onPlaying" | "onPlayingCapture" | "onProgress" | "onProgressCapture" | "onRateChange" | "onRateChangeCapture" | "onSeeked" | "onSeekedCapture" | "onSeeking" | "onSeekingCapture" | "onStalled" | "onStalledCapture" | "onSuspend" | "onSuspendCapture" | "onTimeUpdate" | "onTimeUpdateCapture" | "onVolumeChange" | "onVolumeChangeCapture" | "onWaiting" | "onWaitingCapture" | "onAuxClick" | "onAuxClickCapture" | "onClick" | "onClickCapture" | "onContextMenu" | "onContextMenuCapture" | "onDoubleClick" | "onDoubleClickCapture" | "onDrag" | "onDragCapture" | "onDragEnd" | "onDragEndCapture" | "onDragEnter" | "onDragEnterCapture" | "onDragExit" | "onDragExitCapture" | "onDragLeave" | "onDragLeaveCapture" | "onDragOver" | "onDragOverCapture" | "onDragStart" | "onDragStartCapture" | "onDrop" | "onDropCapture" | "onMouseDown" | "onMouseDownCapture" | "onMouseEnter" | "onMouseLeave" | "onMouseMove" | "onMouseMoveCapture" | "onMouseOut" | "onMouseOutCapture" | "onMouseOver" | "onMouseOverCapture" | "onMouseUp" | "onMouseUpCapture" | "onSelect" | "onSelectCapture" | "onTouchCancel" | "onTouchCancelCapture" | "onTouchEnd" | "onTouchEndCapture" | "onTouchMove" | "onTouchMoveCapture" | "onTouchStart" | "onTouchStartCapture" | "onPointerDown" | "onPointerDownCapture" | "onPointerMove" | "onPointerMoveCapture" | "onPointerUp" | "onPointerUpCapture" | "onPointerCancel" | "onPointerCancelCapture" | "onPointerEnter" | "onPointerEnterCapture" | "onPointerLeave" | "onPointerLeaveCapture" | "onPointerOver" | "onPointerOverCapture" | "onPointerOut" | "onPointerOutCapture" | "onGotPointerCapture" | "onGotPointerCaptureCapture" | "onLostPointerCapture" | "onLostPointerCaptureCapture" | "onScroll" | "onScrollCapture" | "onWheel" | "onWheelCapture" | "onAnimationStart" | "onAnimationStartCapture" | "onAnimationEnd" | "onAnimationEndCapture" | "onAnimationIteration" | "onAnimationIterationCapture" | "onTransitionEnd" | "onTransitionEndCapture" | "yaTrack" | "yaScope" | "sizes" | "width" | "bpSizes" | "customSizes" | "alt" | "crossOrigin" | "decoding" | "height" | "loading" | "src" | "srcSet" | "useMap" | "imageField"> | Pick<ImagePropsWithField, "children" | "key" | "referrerPolicy" | "defaultChecked" | "defaultValue" | "suppressContentEditableWarning" | "suppressHydrationWarning" | "accessKey" | "className" | "contentEditable" | "contextMenu" | "dir" | "draggable" | "hidden" | "id" | "lang" | "placeholder" | "slot" | "spellCheck" | "style" | "tabIndex" | "title" | "translate" | "radioGroup" | "role" | "about" | "datatype" | "inlist" | "prefix" | "property" | "resource" | "typeof" | "vocab" | "autoCapitalize" | "autoCorrect" | "autoSave" | "color" | "itemProp" | "itemScope" | "itemType" | "itemID" | "itemRef" | "results" | "security" | "unselectable" | "inputMode" | "is" | "aria-activedescendant" | "aria-atomic" | "aria-autocomplete" | "aria-busy" | "aria-checked" | "aria-colcount" | "aria-colindex" | "aria-colspan" | "aria-controls" | "aria-current" | "aria-describedby" | "aria-details" | "aria-disabled" | "aria-dropeffect" | "aria-errormessage" | "aria-expanded" | "aria-flowto" | "aria-grabbed" | "aria-haspopup" | "aria-hidden" | "aria-invalid" | "aria-keyshortcuts" | "aria-label" | "aria-labelledby" | "aria-level" | "aria-live" | "aria-modal" | "aria-multiline" | "aria-multiselectable" | "aria-orientation" | "aria-owns" | "aria-placeholder" | "aria-posinset" | "aria-pressed" | "aria-readonly" | "aria-relevant" | "aria-required" | "aria-roledescription" | "aria-rowcount" | "aria-rowindex" | "aria-rowspan" | "aria-selected" | "aria-setsize" | "aria-sort" | "aria-valuemax" | "aria-valuemin" | "aria-valuenow" | "aria-valuetext" | "dangerouslySetInnerHTML" | "onCopy" | "onCopyCapture" | "onCut" | "onCutCapture" | "onPaste" | "onPasteCapture" | "onCompositionEnd" | "onCompositionEndCapture" | "onCompositionStart" | "onCompositionStartCapture" | "onCompositionUpdate" | "onCompositionUpdateCapture" | "onFocus" | "onFocusCapture" | "onBlur" | "onBlurCapture" | "onChange" | "onChangeCapture" | "onBeforeInput" | "onBeforeInputCapture" | "onInput" | "onInputCapture" | "onReset" | "onResetCapture" | "onSubmit" | "onSubmitCapture" | "onInvalid" | "onInvalidCapture" | "onLoad" | "onLoadCapture" | "onError" | "onErrorCapture" | "onKeyDown" | "onKeyDownCapture" | "onKeyPress" | "onKeyPressCapture" | "onKeyUp" | "onKeyUpCapture" | "onAbort" | "onAbortCapture" | "onCanPlay" | "onCanPlayCapture" | "onCanPlayThrough" | "onCanPlayThroughCapture" | "onDurationChange" | "onDurationChangeCapture" | "onEmptied" | "onEmptiedCapture" | "onEncrypted" | "onEncryptedCapture" | "onEnded" | "onEndedCapture" | "onLoadedData" | "onLoadedDataCapture" | "onLoadedMetadata" | "onLoadedMetadataCapture" | "onLoadStart" | "onLoadStartCapture" | "onPause" | "onPauseCapture" | "onPlay" | "onPlayCapture" | "onPlaying" | "onPlayingCapture" | "onProgress" | "onProgressCapture" | "onRateChange" | "onRateChangeCapture" | "onSeeked" | "onSeekedCapture" | "onSeeking" | "onSeekingCapture" | "onStalled" | "onStalledCapture" | "onSuspend" | "onSuspendCapture" | "onTimeUpdate" | "onTimeUpdateCapture" | "onVolumeChange" | "onVolumeChangeCapture" | "onWaiting" | "onWaitingCapture" | "onAuxClick" | "onAuxClickCapture" | "onClick" | "onClickCapture" | "onContextMenu" | "onContextMenuCapture" | "onDoubleClick" | "onDoubleClickCapture" | "onDrag" | "onDragCapture" | "onDragEnd" | "onDragEndCapture" | "onDragEnter" | "onDragEnterCapture" | "onDragExit" | "onDragExitCapture" | "onDragLeave" | "onDragLeaveCapture" | "onDragOver" | "onDragOverCapture" | "onDragStart" | "onDragStartCapture" | "onDrop" | "onDropCapture" | "onMouseDown" | "onMouseDownCapture" | "onMouseEnter" | "onMouseLeave" | "onMouseMove" | "onMouseMoveCapture" | "onMouseOut" | "onMouseOutCapture" | "onMouseOver" | "onMouseOverCapture" | "onMouseUp" | "onMouseUpCapture" | "onSelect" | "onSelectCapture" | "onTouchCancel" | "onTouchCancelCapture" | "onTouchEnd" | "onTouchEndCapture" | "onTouchMove" | "onTouchMoveCapture" | "onTouchStart" | "onTouchStartCapture" | "onPointerDown" | "onPointerDownCapture" | "onPointerMove" | "onPointerMoveCapture" | "onPointerUp" | "onPointerUpCapture" | "onPointerCancel" | "onPointerCancelCapture" | "onPointerEnter" | "onPointerEnterCapture" | "onPointerLeave" | "onPointerLeaveCapture" | "onPointerOver" | "onPointerOverCapture" | "onPointerOut" | "onPointerOutCapture" | "onGotPointerCapture" | "onGotPointerCaptureCapture" | "onLostPointerCapture" | "onLostPointerCaptureCapture" | "onScroll" | "onScrollCapture" | "onWheel" | "onWheelCapture" | "onAnimationStart" | "onAnimationStartCapture" | "onAnimationEnd" | "onAnimationEndCapture" | "onAnimationIteration" | "onAnimationIterationCapture" | "onTransitionEnd" | "onTransitionEndCapture" | "yaTrack" | "yaScope" | "sizes" | "width" | "bpSizes" | "customSizes" | "alt" | "crossOrigin" | "decoding" | "height" | "loading" | "src" | "srcSet" | "useMap" | "imageField">) & React__default.RefAttributes<HTMLImageElement>>;

var css_248z$1 = "@layer components {\n\thtml {\n\t\t--yxt-breadcrumbs-spacing: 1rem;\n\t}\n\t\t.Breadcrumbs-list {\n\t\t\tdisplay: flex;\n\t\t}\n\n\t\t.Breadcrumbs-separator {\n\t\t\tmargin: 0 var(--yxt-breadcrumbs-spacing);\n\t\t}\n}";
styleInject(css_248z$1);

interface BreadcrumbsProps extends StandardProps {
    separator?: ReactNode;
    className?: string;
}
interface BreadcrumbsPropsDefault extends BreadcrumbsProps {
    breadcrumbs: Array<[string, string]>;
}
declare const Breadcrumbs: (props: BreadcrumbsPropsDefault) => JSX.Element;

interface StreamsBreadcrumbs {
    dm_directoryParents: Array<StreamsBreadcrumb>;
}
interface StreamsBreadcrumb {
    slug: string;
    name: string;
}
interface BreadcrumbsPropsStreams extends BreadcrumbsProps {
    streamsBreadcrumbs: StreamsBreadcrumbs;
}
declare const YextBreadcrumbs: (props: BreadcrumbsPropsStreams) => JSX.Element;

declare type MapProps = {
    apiKey?: string;
    bounds?: Coordinate[];
    clientKey?: string;
    children?: any;
    controlEnabled?: boolean;
    defaultCenter?: Coordinate;
    defaultZoom?: number;
    padding?: number | {
        bottom: number | (() => number);
        left: number | (() => number);
        right: number | (() => number);
        top: number | (() => number);
    };
    panHandler?: (previousBounds: GeoBounds, currentBounds: GeoBounds) => void;
    panStartHandler?: (currentBounds: GeoBounds) => void;
    provider: MapProvider;
    providerOptions?: {};
    singlePinZoom?: number;
};
declare type MapDefaultProps = {
    controlEnabled: boolean;
    defaultCenter: Coordinate;
    defaultZoom: number;
    padding: number | {
        bottom: number | (() => number);
        left: number | (() => number);
        right: number | (() => number);
        top: number | (() => number);
    };
    panHandler: (previousBounds: GeoBounds, currentBounds: GeoBounds) => void;
    panStartHandler: (currentBounds: GeoBounds) => void;
    providerOptions: {};
    singlePinZoom: number;
};

declare function useMapContext(): Map$1;
declare const Map: {
    (props: MapProps & MapDefaultProps): JSX.Element;
    defaultProps: MapDefaultProps;
};

declare type MarkerDefaultProps = {
    markerClickHandler: (id: string) => void;
    markerHoverHandler: (hovered: boolean, id: string) => void;
    markerFocusHandler: (focused: boolean, id: string) => void;
    markerStatusOptions: {
        [key: string]: boolean;
    };
};
interface BaseMarkerProps extends MarkerDefaultProps {
    hideOffscreen?: boolean;
    id: string;
    propertiesForStatus?: (status: string) => PinProperties;
}
/**
 * ChildMarker: Pass JSX or a component that renders JSX as the child to Marker
 * - Coordinate is required in order to place on the map
 * - mapPinOptions is forbidden to avoid overriding rendered child
 * - zIndex is optional to control multiple markers
 */
interface ChildMarker extends BaseMarkerProps {
    children: React.ReactChild;
    coordinate: Coordinate;
    mapPinOptions?: never;
    zIndex?: number;
}
/**
 * MapPinOptions Marker: Build Marker from MapPinOptions
 * - Use MapPinOptions .withCoordinate(), .withHideOffscreen(), .withIcon(), and .withPropertiesForStatus()
 * - .withProvider() is done automatically from the provider passed to the Map component in the MapContext
 * - Coordinate is forbidden as it should be passed to .withCoordinate()
 * - zIndex is forbedden as it should be added in .withPropertiesForStatus()
 * - children is forbidden as they won't render anything
 */
interface MapOptionsMarker extends BaseMarkerProps {
    mapPinOptions: MapPinOptions;
    coordinate?: never;
    zIndex?: never;
    children?: never;
}
declare type MarkerProps = ChildMarker | MapOptionsMarker;

declare const Marker: {
    ({ children, coordinate, hideOffscreen, id, mapPinOptions, markerClickHandler, markerFocusHandler, markerHoverHandler, markerStatusOptions, propertiesForStatus, zIndex }: MarkerProps): React__default.ReactPortal | null;
    defaultProps: MarkerDefaultProps;
};

declare class HoursInterval {
    end: Date;
    start: Date;
    /**
     * @param {Date} date the Date for the day on which the interval starts
     * @param {interval} interval the Yext Streams interval data
     */
    constructor(date: Date, interval: OpenIntervals);
    /**
     * @param {Date} date A moment in time
     * @returns {boolean} True if the given moment is within the interval
     */
    contains(date: Date): boolean;
    /**
     * @param {Object} opts intl.DateTimeFormatOptions
     * @param {string} locale defaults to 'en-US'
     * @returns {string} representation of this interval's start time
     */
    getStartTime(locale?: string, opts?: Intl.DateTimeFormatOptions): string;
    /**
     * @param {Object} opts intl.DateTimeFormatOptions
     * @param {string} locale defaults to 'en-US'
     * @returns {string} representation of this interval's end time
     */
    getEndTime(locale?: string, opts?: Intl.DateTimeFormatOptions): string;
    /**
     * @param {HoursInterval} other
     * @returns {boolean} if this interval and 'other' have the same start/end
     */
    timeIsEqualTo(other: HoursInterval): boolean;
}
declare class Hours {
    holidayHoursByDate: Record<string, Holiday>;
    hours: Hours$1;
    /**
     * @param {Object} hours Hours object in the format returned by Yext Streams
     */
    constructor(hours: Hours$1);
    /**
     * @param {Date} date A moment in time
     * @returns {HoursInterval?} The first interval that contains the given moment, null if none
     */
    getInterval(date: Date): HoursInterval | null;
    /**
     * @returns {HoursInterval?} The first interval that contains the current time, null if none
     */
    getCurrentInterval(): HoursInterval | null;
    /**
     * @param {Date} date A moment in time
     * @returns {HoursInterval?} The next interval that hasn't started as of the given moment
     */
    getIntervalAfter(date: Date): HoursInterval | null;
    getIntervalsForNDays(n: number, startDate: Date): HoursInterval[];
    /**
     * @param {Date} date The day to get the hours for
     * @returns {Object?} The daily holiday hours object from the original Streams response for the
     *   given date, null if none
     */
    getHolidayHours(date: Date): Holiday | null;
    /**
     * @param {Date} date The day to get the hours for
     * @returns {Object?} The daily normal hours object from the original Streams response for the
     *   given date, null if none
     */
    getNormalHours(date: Date): Day | null;
    /**
     * @param {Date} date The day to get the hours for
     * @returns {Object?} The daily hours object from the original Streams response for the given
     *   date, null if none
     */
    getHours(date: Date): Day | null;
    /**
     * @returns {HoursInterval?} The next interval that hasn't started as of the current time
     */
    getNextInterval(): HoursInterval | null;
    /**
     * @param {Date} date A day
     * @returns {Boolean} True if the given day has holiday hours
     */
    isHoliday(date: Date): boolean;
    /**
     * Yext platform uses the field `hours.reopenDate` to indicate an entity is
     *  temporarily closed for more than one day.
     * @param {Date} date
     * @returns {Boolean} True if the given date is before 'reopenDate'
     */
    isTemporarilyClosedAt(targetDate: Date): boolean;
    /**
     * @param {Date} date A moment in time
     * @returns {Boolean} True if the given moment falls within any interval
     */
    isOpenAt(date: Date): boolean;
    /**
     * @returns {Boolean} True if the current time falls within any interval
     */
    isOpenNow(): boolean;
}
/**
 * @param {Array<any>} arr Any array
 * @param {number} n amount to shift
 * @returns {Array<any>} a new array shifted 'n' elements to the right, looping from the end back to the start
 */
declare function arrayShift(arr: Array<any>, n: number): Array<any>;
/**
 * @param {HoursInterval[]} il1
 * @param {HoursInterval[]} il2
 * @returns {boolean} whether the two intervals lists are equal
 */
declare function intervalsListsAreEqual(il1: HoursInterval[], il2: HoursInterval[]): boolean;

interface StatusParams {
    isOpen: boolean;
    currentInterval: HoursInterval | null;
    futureInterval: HoursInterval | null;
    timeOptions?: Intl.DateTimeFormatOptions;
    dayOptions?: Intl.DateTimeFormatOptions;
}
interface TemplateParams {
    currentTemplate?: (s: StatusParams) => React__default.ReactNode;
    separatorTemplate?: (s: StatusParams) => React__default.ReactNode;
    futureTemplate?: (s: StatusParams) => React__default.ReactNode;
    timeTemplate?: (s: StatusParams) => React__default.ReactNode;
    dayOfWeekTemplate?: (s: StatusParams) => React__default.ReactNode;
}
interface StatusTemplateParams extends StatusParams, TemplateParams {
}
interface HoursStatusProps extends TemplateParams {
    hours: Hours$1;
    timeOptions?: Intl.DateTimeFormatOptions;
    dayOptions?: Intl.DateTimeFormatOptions;
    statusTemplate?: (s: StatusParams) => React__default.ReactNode;
    className?: string;
}
declare function defaultStatusTemplate(params: StatusTemplateParams, props?: HoursStatusProps): React__default.ReactNode;
declare const HoursStatus: React__default.FC<HoursStatusProps>;

var css_248z = "@layer components {\n  html {\n    --yxt-hoursTable-col1-width: 128px;\n    --yxt-hoursTable-col2-width: 256px;\n  }\n  \n  .HoursTable-row {\n    display: flex;\n  }\n  \n  .HoursTable-day {\n    flex: 0 0 var(--yxt-hoursTable-col1-width);\n  }\n  \n  .HoursTable-intervals {\n    display: flex;\n    flex-direction: column;\n    flex: 0 0 var(--yxt-hoursTable-col2-width);\n  }\n}\n";
styleInject(css_248z);

interface DayOfWeekNames {
    Sunday?: string;
    Monday?: string;
    Tuesday?: string;
    Wednesday?: string;
    Thursday?: string;
    Friday?: string;
    Saturday?: string;
}
interface HoursTableProps {
    hours: Hours$1;
    dayOfWeekNames?: DayOfWeekNames;
    startOfWeek?: 'Today' | 'Sunday' | 'Monday' | 'Tuesday' | 'Wednesday' | 'Thursday' | 'Friday' | 'Saturday';
    timeOptions?: Intl.DateTimeFormatOptions;
    collapseDays?: boolean;
    intervalStringsBuilderFn?: (h: HoursTableDayData, t?: Intl.DateTimeFormatOptions) => string[];
    className?: string;
}
interface HoursTableDayData {
    dayOfWeek: string;
    intervals: HoursInterval[];
    sortIdx: number;
    isToday: boolean;
    startDay?: string;
    endDay?: string;
}
declare const HoursTable: React__default.FC<HoursTableProps>;

declare type LocationMapDefaultProps = {
    controlEnabled: boolean;
    markerClickHandler: (id: string) => void;
    markerHoverHandler: (hovered: boolean, id: string) => void;
    markerFocusHandler: (focused: boolean, id: string) => void;
};
interface LocationMapProps extends MapProps {
    children: React.ReactChild;
    coordinate: Coordinate;
    linkSameTab?: boolean;
    pinUrl?: string;
}

declare const LocationMap: {
    (props: LocationMapProps & LocationMapDefaultProps): JSX.Element;
    defaultProps: LocationMapDefaultProps;
};

declare type AddressPart = "line1" | "line2" | "line3" | "postalCode" | "city" | "regionCode" | "region" | "country" | "countryCode" | "extraDescription" | "sublocality";
interface AddressProps extends StandardProps {
    address: Address;
    linkToGetDirections?: string;
    lines?: Array<Array<AddressPart>>;
}
declare const Address: (props: AddressProps) => JSX.Element;

declare enum Provider {
    Google = "GOOGLE",
    Apple = "APPLE",
    Bing = "BING"
}

/**
 * Get a third-party maps url for a Yext location
 *
 * @param {any} profile - Partial of Yext Location entity profile
 * @param {Provider} provider - Google, Apple, Bing
 * @param {boolean} directions - Enable driving directions
 *
 * @returns {string} - Maps service url
 */
declare const getDirections: (profile: any, provider?: Provider, directions?: boolean) => string | undefined;

declare function useGlobal(): ConfigurationProviderContextType;
declare const ConfigurationProvider: React$1.Provider<ConfigurationProviderContextType>;

export { Address, YextBreadcrumbs as Breadcrumbs, Button, ComponentProps, ConfigurationProvider, ConfigurationProviderContextType, Breadcrumbs as CustomBreadcrumbs, DayOfWeekNames, Hours, HoursInterval, HoursStatus, HoursStatusProps, HoursTable, HoursTableDayData, HoursTableProps, Image, Link, LocationMap, Map, Marker, StandardProps, StatusParams, StatusTemplateParams, TemplateParams, Yext, arrayShift, defaultStatusTemplate, getDirections, intervalsListsAreEqual, useGlobal, useMapContext };
